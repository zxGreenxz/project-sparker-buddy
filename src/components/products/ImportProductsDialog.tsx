import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import * as XLSX from "xlsx";
import { Progress } from "@/components/ui/progress";

interface ImportProductsDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSuccess: () => void;
}

export function ImportProductsDialog({ open, onOpenChange, onSuccess }: ImportProductsDialogProps) {
  const { toast } = useToast();
  const [isImporting, setIsImporting] = useState(false);
  const [progress, setProgress] = useState(0);
  const [file, setFile] = useState<File | null>(null);

  const parsePrice = (value: any): number => {
    if (typeof value === "number") return value;
    if (typeof value === "string") {
      // X√≥a kho·∫£ng tr·∫Øng
      let cleaned = value.trim().replace(/\s/g, "");
      
      // N·∫øu c√≥ d·∫•u ch·∫•m ho·∫∑c ph·∫©y ·ªü 3 k√Ω t·ª± cu·ªëi ‚Üí d·∫•u th·∫≠p ph√¢n
      // VD: 123,45 ho·∫∑c 123.45 ‚Üí gi·ªØ l·∫°i d·∫•u cu·ªëi
      const lastComma = cleaned.lastIndexOf(',');
      const lastDot = cleaned.lastIndexOf('.');
      
      if (lastComma > -1 && lastComma > cleaned.length - 4) {
        // D·∫•u ph·∫©y ·ªü cu·ªëi (1-3 s·ªë sau d·∫•u) ‚Üí d·∫•u th·∫≠p ph√¢n
        cleaned = cleaned.replace(/\./g, '').replace(',', '.');
      } else if (lastDot > -1 && lastDot > cleaned.length - 4) {
        // D·∫•u ch·∫•m ·ªü cu·ªëi (1-3 s·ªë sau d·∫•u) ‚Üí d·∫•u th·∫≠p ph√¢n
        cleaned = cleaned.replace(/,/g, '');
      } else {
        // Kh√¥ng c√≥ d·∫•u ·ªü cu·ªëi ho·∫∑c c√≥ > 3 s·ªë sau d·∫•u ‚Üí d·∫•u ph√¢n c√°ch h√†ng ngh√¨n
        cleaned = cleaned.replace(/[,.]/g, '');
      }
      
      return parseFloat(cleaned) || 0;
    }
    return 0;
  };

  const cleanProductName = (productName: string, productCode: string): string => {
    // X√≥a [m√£ s·∫£n ph·∫©m] ·ªü ƒë·∫ßu t√™n n·∫øu c√≥
    // VD: "[LSET690X1] 1509 A10 SET √ÅO" ‚Üí "1509 A10 SET √ÅO"
    const pattern = new RegExp(`^\\[${productCode}\\]\\s*`, 'i');
    return productName.replace(pattern, '').trim();
  };

  const downloadTemplate = () => {
    const template = [
      {
        "M√£ s·∫£n ph·∫©m": "SP001",
        "T√™n s·∫£n ph·∫©m": "S·∫£n ph·∫©m m·∫´u",
        "Gi√° b√°n": 100000,
        "Gi√° mua": 80000,
        "ƒê∆°n v·ªã": "C√°i",
        "Nh√≥m s·∫£n ph·∫©m": "Nh√≥m A",
        "M√£ v·∫°ch": "1234567890",
        "S·ªë l∆∞·ª£ng t·ªìn": 10
      }
    ];

    const ws = XLSX.utils.json_to_sheet(template);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Products");
    XLSX.writeFile(wb, "template_import_products.xlsx");
  };

  const handleImport = async () => {
    if (!file) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng ch·ªçn file Excel",
        variant: "destructive",
      });
      return;
    }

    setIsImporting(true);
    setProgress(0);

    try {
      const data = await file.arrayBuffer();
      const workbook = XLSX.read(data);
      const worksheet = workbook.Sheets[workbook.SheetNames[0]];
      const jsonData = XLSX.utils.sheet_to_json(worksheet);

      // Get existing product codes
      const { data: existingProducts } = await supabase
        .from("products")
        .select("product_code, id")
        .range(0, 9999);

      const existingCodes = new Set(existingProducts?.map((p) => p.product_code) || []);

      let insertedCount = 0;
      let updatedCount = 0;
      let skippedCount = 0;

      for (let i = 0; i < jsonData.length; i++) {
        const row: any = jsonData[i];

        const productCode = row["M√£ s·∫£n ph·∫©m"]?.toString().trim();
        
        if (!productCode) {
          skippedCount++;
          continue;
        }

        const isExisting = existingCodes.has(productCode);

        const rawProductName = row["T√™n s·∫£n ph·∫©m"]?.toString().trim() || "Ch∆∞a c√≥ t√™n";
        const cleanedProductName = cleanProductName(rawProductName, productCode);

        const productData = {
          product_code: productCode,
          product_name: cleanedProductName,
          selling_price: parsePrice(row["Gi√° b√°n"]),
          purchase_price: parsePrice(row["Gi√° mua"]),
          unit: row["ƒê∆°n v·ªã"]?.toString().trim() || "C√°i",
          category: row["Nh√≥m s·∫£n ph·∫©m"]?.toString().trim() || null,
          barcode: row["M√£ v·∫°ch"]?.toString().trim() || null,
          stock_quantity: parseInt(row["S·ªë l∆∞·ª£ng t·ªìn"]?.toString() || "0") || 0,
        };

        // UPSERT: T·ª± ƒë·ªông insert n·∫øu m·ªõi, update n·∫øu ƒë√£ t·ªìn t·∫°i
        const { error } = await supabase
          .from("products")
          .upsert(productData, { 
            onConflict: 'product_code',
            ignoreDuplicates: false // B·∫Øt bu·ªôc c·∫≠p nh·∫≠t n·∫øu tr√πng
          });

        if (!error) {
          if (isExisting) {
            updatedCount++;
          } else {
            insertedCount++;
          }
        } else {
          console.error(`L·ªói d√≤ng ${i + 1}:`, error);
          skippedCount++;
        }

        setProgress(((i + 1) / jsonData.length) * 100);
      }

      toast({
        title: "Import th√†nh c√¥ng",
        description: `ƒê√£ th√™m ${insertedCount} s·∫£n ph·∫©m m·ªõi, c·∫≠p nh·∫≠t ${updatedCount} s·∫£n ph·∫©m, b·ªè qua ${skippedCount} d√≤ng`,
      });

      onSuccess();
      onOpenChange(false);
      setFile(null);
      setProgress(0);
    } catch (error) {
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ import file Excel",
        variant: "destructive",
      });
    } finally {
      setIsImporting(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Import s·∫£n ph·∫©m t·ª´ Excel</DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div>
            <div className="flex items-center justify-between mb-2">
              <Label htmlFor="excel-file">Ch·ªçn file Excel</Label>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={downloadTemplate}
                disabled={isImporting}
              >
                üì• T·∫£i file m·∫´u
              </Button>
            </div>
            <Input
              id="excel-file"
              type="file"
              accept=".xlsx,.xls"
              onChange={(e) => setFile(e.target.files?.[0] || null)}
              disabled={isImporting}
            />
            <p className="text-xs text-muted-foreground mt-2">
              C·ªôt c·∫ßn c√≥: M√£ s·∫£n ph·∫©m, T√™n s·∫£n ph·∫©m, Gi√° b√°n, Gi√° mua, ƒê∆°n v·ªã, Nh√≥m s·∫£n ph·∫©m, M√£ v·∫°ch, S·ªë l∆∞·ª£ng t·ªìn
            </p>
            <p className="text-xs text-muted-foreground mt-1">
              ‚úÖ S·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i (tr√πng m√£) s·∫Ω ƒë∆∞·ª£c <strong>C·∫¨P NH·∫¨T</strong> gi√° v√† th√¥ng tin
            </p>
          </div>

          {isImporting && (
            <div className="space-y-2">
              <Progress value={progress} />
              <p className="text-sm text-center text-muted-foreground">
                ƒêang import... {Math.round(progress)}%
              </p>
            </div>
          )}

          <div className="flex gap-2 justify-end">
            <Button
              type="button"
              variant="outline"
              onClick={() => {
                onOpenChange(false);
                setFile(null);
                setProgress(0);
              }}
              disabled={isImporting}
            >
              H·ªßy
            </Button>
            <Button onClick={handleImport} disabled={!file || isImporting}>
              {isImporting ? "ƒêang import..." : "Import"}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
